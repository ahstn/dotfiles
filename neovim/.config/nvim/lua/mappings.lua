require("which-key").register({
  -- Top Level
  t = { '<cmd>NvimTreeToggle<cr>', 'Nvim Tree' },
  P = { '<cmd>lua require("telescope.builtin").find_files()<CR>', 'Files' },
  R = { '<cmd>lua require("telescope.builtin").oldfiles()<CR>', 'Prev Open Files' },
  h = { "<cmd>nohlsearch<CR>", "No Highlight" },

  -- Nested
  b = {
    name = "Buffers",
    j = { "<cmd>BufferLinePick<cr>", "Jump" },
    b = { "<cmd>BufferLineCyclePrev<cr>", "Previous" },
    b = { "<cmd>BufferLineCycleNext<cr>", "Next" },
    e = { "<cmd>BufferLinePickClose<cr>", "Pick which buffer to close" },
    h = { "<cmd>BufferLineCloseLeft<cr>", "Close all to the left" },
    l = { "<cmd>BufferLineCloseRight<cr>", "Close all to the right" },
  },
  l = {
    name = 'LSP',
    f = { name = 'Format'},
    r = { name = 'Rename Reference'},
    s = { name = 'Signature Help'},
    D = { name = 'Type Definition'},
    e = { name = 'Show Diagnostics'}
  },
  L = {
    name = 'Telescope LSP',
    r = { '<cmd>lua require("telescope.builtin").lsp_references()<CR>', 'References' },
    d = { '<cmd>lua require("telescope.builtin").lsp_definitions()<CR>', 'Definitions' },
    t = { '<cmd>lua require("telescope.builtin").lsp_type_definitions()<CR>', 'Type Definitions' },
    i = { '<cmd>lua require("telescope.builtin").lsp_implementations()<CR>', 'Implementations' },
    s = { '<cmd>lua require("telescope.builtin").lsp_document_symbols()<CR>', 'Document Symbols' },
    w = { '<cmd>lua require("telescope.builtin").lsp_workspace_symbols()<CR>', 'Workspace Symbols' },
    a = { '<cmd>lua require("telescope.builtin").lsp_code_actions()<CR>', 'Code Actions' },
    n = { '<cmd>lua require("telescope.builtin").lsp_range_code_actions()<CR>', 'Range Code Actions' },
    g = { '<cmd>lua require("telescope.builtin").lsp_document_diagnostics()<CR>', 'Document Diagnostics' },
    o = { '<cmd>lua require("telescope.builtin").lsp_workspace_diagnostics()<CR>', 'Workspace Diagnostics' },
    e = { '<cmd>lua require("telescope.builtin").treesitter()<CR>', 'Treesitter' },
    l = { '<cmd>lua vim.lsp.codelens.display()<CR>', 'Code Lens' },
  },
  s = {
    name = "Telescope Search",
    b = { '<cmd>lua require("telescope.builtin").buffers()<CR>', 'Buffers' },
    f = { '<cmd>lua require("telescope.builtin").find_files()<CR>', 'Files' },
    o = { '<cmd>lua require("telescope.builtin").oldfiles()<CR>', 'Prev Open Files' },
    g = { '<cmd>lua require("telescope.builtin").live_grep()<CR>', 'Live Grep' },
    j = { '<cmd>lua require("telescope.builtin").jumplist()<CR>', 'Jump List' },
    O = { '<cmd>lua require("telescope.builtin").vim_options()<CR>', 'Vim Options' },
    k = { '<cmd>lua require("telescope.builtin").keymaps()<CR>', 'Keymaps' },
    c = { '<cmd>lua require("telescope.builtin").commands()<CR>', 'Commands' },
  },
  g = {
    name = 'Git',
    f = { '<cmd>lua require("telescope.builtin").git_files()<CR>', 'Files' },
    s = { '<cmd>lua require("telescope.builtin").git_status()<CR>', 'Status' },
    c = { '<cmd>lua require("telescope.builtin").git_commits()<CR>', 'Commit Log' },
    l = { '<cmd>lua require("telescope.builtin").git_bcommits()<CR>', 'Commit Log Current Buffer' },
    b = { '<cmd>lua require("telescope.builtin").git_branches()<CR>', 'Branches' },
    t = { '<cmd>lua require("telescope.builtin").git_stash()<CR>', 'Stash' },
  },
  p = {
    name = "Packer",
    c = { "<cmd>PackerCompile<cr>", "Compile" },
    i = { "<cmd>PackerInstall<cr>", "Install" },
    r = { "<cmd>lua require('lvim.plugin-loader').recompile()<cr>", "Re-compile" },
    s = { "<cmd>PackerSync<cr>", "Sync" },
    S = { "<cmd>PackerStatus<cr>", "Status" },
    u = { "<cmd>PackerUpdate<cr>", "Update" },
  },
  w = {
    name = 'Workspace',
    a = { name = 'Add' },
    l = { name = 'List' },
    r = { name = 'Remove' },
  },
}, { mode = 'n', prefix = "<leader>" })
